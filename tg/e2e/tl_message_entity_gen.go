// Code generated by gotdgen, DO NOT EDIT.

package e2e

import (
	"context"
	"fmt"
	"strings"

	"github.com/gotd/td/bin"
)

// No-op definition for keeping imports.
var _ = bin.Buffer{}
var _ = context.Background()
var _ = fmt.Stringer(nil)
var _ = strings.Builder{}

// MessageEntityUnknown represents TL type `messageEntityUnknown#bb92ba95`.
// Unknown message entity
//
// See https://core.telegram.org/constructor/messageEntityUnknown for reference.
type MessageEntityUnknown struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityUnknownTypeID is TL type id of MessageEntityUnknown.
const MessageEntityUnknownTypeID = 0xbb92ba95

func (m *MessageEntityUnknown) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityUnknown) String() string {
	if m == nil {
		return "MessageEntityUnknown(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityUnknown")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityUnknown) TypeID() uint32 {
	return MessageEntityUnknownTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityUnknown) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUnknown#bb92ba95 as nil")
	}
	b.PutID(MessageEntityUnknownTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityUnknown) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityUnknown) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityUnknown) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUnknown#bb92ba95 to nil")
	}
	if err := b.ConsumeID(MessageEntityUnknownTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityUnknown#bb92ba95: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnknown#bb92ba95: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnknown#bb92ba95: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityUnknown) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityUnknown.
var (
	_ bin.Encoder = &MessageEntityUnknown{}
	_ bin.Decoder = &MessageEntityUnknown{}

	_ MessageEntityClass = &MessageEntityUnknown{}
)

// MessageEntityMention represents TL type `messageEntityMention#fa04579d`.
// Message entity mentioningÂ¹ the current user
//
// Links:
//  1) https://core.telegram.org/api/mentions
//
// See https://core.telegram.org/constructor/messageEntityMention for reference.
type MessageEntityMention struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityMentionTypeID is TL type id of MessageEntityMention.
const MessageEntityMentionTypeID = 0xfa04579d

func (m *MessageEntityMention) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityMention) String() string {
	if m == nil {
		return "MessageEntityMention(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityMention")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityMention) TypeID() uint32 {
	return MessageEntityMentionTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityMention) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityMention#fa04579d as nil")
	}
	b.PutID(MessageEntityMentionTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityMention) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityMention) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityMention) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityMention#fa04579d to nil")
	}
	if err := b.ConsumeID(MessageEntityMentionTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityMention#fa04579d: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMention#fa04579d: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMention#fa04579d: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityMention) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityMention.
var (
	_ bin.Encoder = &MessageEntityMention{}
	_ bin.Decoder = &MessageEntityMention{}

	_ MessageEntityClass = &MessageEntityMention{}
)

// MessageEntityHashtag represents TL type `messageEntityHashtag#6f635b0d`.
// #hashtag message entity
//
// See https://core.telegram.org/constructor/messageEntityHashtag for reference.
type MessageEntityHashtag struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityHashtagTypeID is TL type id of MessageEntityHashtag.
const MessageEntityHashtagTypeID = 0x6f635b0d

func (m *MessageEntityHashtag) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityHashtag) String() string {
	if m == nil {
		return "MessageEntityHashtag(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityHashtag")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityHashtag) TypeID() uint32 {
	return MessageEntityHashtagTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityHashtag) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityHashtag#6f635b0d as nil")
	}
	b.PutID(MessageEntityHashtagTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityHashtag) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityHashtag) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityHashtag) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityHashtag#6f635b0d to nil")
	}
	if err := b.ConsumeID(MessageEntityHashtagTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityHashtag#6f635b0d: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityHashtag#6f635b0d: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityHashtag#6f635b0d: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityHashtag) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityHashtag.
var (
	_ bin.Encoder = &MessageEntityHashtag{}
	_ bin.Decoder = &MessageEntityHashtag{}

	_ MessageEntityClass = &MessageEntityHashtag{}
)

// MessageEntityBotCommand represents TL type `messageEntityBotCommand#6cef8ac7`.
// Message entity representing a bot /command
//
// See https://core.telegram.org/constructor/messageEntityBotCommand for reference.
type MessageEntityBotCommand struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBotCommandTypeID is TL type id of MessageEntityBotCommand.
const MessageEntityBotCommandTypeID = 0x6cef8ac7

func (m *MessageEntityBotCommand) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBotCommand) String() string {
	if m == nil {
		return "MessageEntityBotCommand(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityBotCommand")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityBotCommand) TypeID() uint32 {
	return MessageEntityBotCommandTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityBotCommand) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBotCommand#6cef8ac7 as nil")
	}
	b.PutID(MessageEntityBotCommandTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBotCommand) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBotCommand) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBotCommand) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBotCommand#6cef8ac7 to nil")
	}
	if err := b.ConsumeID(MessageEntityBotCommandTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBotCommand#6cef8ac7: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBotCommand#6cef8ac7: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBotCommand#6cef8ac7: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBotCommand) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBotCommand.
var (
	_ bin.Encoder = &MessageEntityBotCommand{}
	_ bin.Decoder = &MessageEntityBotCommand{}

	_ MessageEntityClass = &MessageEntityBotCommand{}
)

// MessageEntityUrl represents TL type `messageEntityUrl#6ed02538`.
// Message entity representing an in-text url: https://google.comÂ¹; for text urlsÂ², use messageEntityTextUrlÂ³.
//
// Links:
//  1) https://google.com
//  2) https://google.com
//  3) https://core.telegram.org/constructor/messageEntityTextUrl
//
// See https://core.telegram.org/constructor/messageEntityUrl for reference.
type MessageEntityUrl struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityUrlTypeID is TL type id of MessageEntityUrl.
const MessageEntityUrlTypeID = 0x6ed02538

func (m *MessageEntityUrl) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityUrl) String() string {
	if m == nil {
		return "MessageEntityUrl(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityUrl")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityUrl) TypeID() uint32 {
	return MessageEntityUrlTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityUrl) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUrl#6ed02538 as nil")
	}
	b.PutID(MessageEntityUrlTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityUrl) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityUrl) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityUrl) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUrl#6ed02538 to nil")
	}
	if err := b.ConsumeID(MessageEntityUrlTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityUrl#6ed02538: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUrl#6ed02538: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUrl#6ed02538: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityUrl) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityUrl.
var (
	_ bin.Encoder = &MessageEntityUrl{}
	_ bin.Decoder = &MessageEntityUrl{}

	_ MessageEntityClass = &MessageEntityUrl{}
)

// MessageEntityEmail represents TL type `messageEntityEmail#64e475c2`.
// Message entity representing an email@example.comÂ¹.
//
// Links:
//  1) https://core.telegram.orgmailto:email@example.com
//
// See https://core.telegram.org/constructor/messageEntityEmail for reference.
type MessageEntityEmail struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityEmailTypeID is TL type id of MessageEntityEmail.
const MessageEntityEmailTypeID = 0x64e475c2

func (m *MessageEntityEmail) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityEmail) String() string {
	if m == nil {
		return "MessageEntityEmail(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityEmail")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityEmail) TypeID() uint32 {
	return MessageEntityEmailTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityEmail) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityEmail#64e475c2 as nil")
	}
	b.PutID(MessageEntityEmailTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityEmail) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityEmail) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityEmail) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityEmail#64e475c2 to nil")
	}
	if err := b.ConsumeID(MessageEntityEmailTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityEmail#64e475c2: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityEmail#64e475c2: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityEmail#64e475c2: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityEmail) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityEmail.
var (
	_ bin.Encoder = &MessageEntityEmail{}
	_ bin.Decoder = &MessageEntityEmail{}

	_ MessageEntityClass = &MessageEntityEmail{}
)

// MessageEntityBold represents TL type `messageEntityBold#bd610bc9`.
// Message entity representing bold text.
//
// See https://core.telegram.org/constructor/messageEntityBold for reference.
type MessageEntityBold struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBoldTypeID is TL type id of MessageEntityBold.
const MessageEntityBoldTypeID = 0xbd610bc9

func (m *MessageEntityBold) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBold) String() string {
	if m == nil {
		return "MessageEntityBold(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityBold")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityBold) TypeID() uint32 {
	return MessageEntityBoldTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityBold) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBold#bd610bc9 as nil")
	}
	b.PutID(MessageEntityBoldTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBold) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBold) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBold) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBold#bd610bc9 to nil")
	}
	if err := b.ConsumeID(MessageEntityBoldTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBold#bd610bc9: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBold#bd610bc9: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBold#bd610bc9: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBold) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBold.
var (
	_ bin.Encoder = &MessageEntityBold{}
	_ bin.Decoder = &MessageEntityBold{}

	_ MessageEntityClass = &MessageEntityBold{}
)

// MessageEntityItalic represents TL type `messageEntityItalic#826f8b60`.
// Message entity representing italic text.
//
// See https://core.telegram.org/constructor/messageEntityItalic for reference.
type MessageEntityItalic struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityItalicTypeID is TL type id of MessageEntityItalic.
const MessageEntityItalicTypeID = 0x826f8b60

func (m *MessageEntityItalic) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityItalic) String() string {
	if m == nil {
		return "MessageEntityItalic(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityItalic")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityItalic) TypeID() uint32 {
	return MessageEntityItalicTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityItalic) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityItalic#826f8b60 as nil")
	}
	b.PutID(MessageEntityItalicTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityItalic) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityItalic) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityItalic) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityItalic#826f8b60 to nil")
	}
	if err := b.ConsumeID(MessageEntityItalicTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityItalic#826f8b60: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityItalic#826f8b60: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityItalic#826f8b60: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityItalic) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityItalic.
var (
	_ bin.Encoder = &MessageEntityItalic{}
	_ bin.Decoder = &MessageEntityItalic{}

	_ MessageEntityClass = &MessageEntityItalic{}
)

// MessageEntityCode represents TL type `messageEntityCode#28a20571`.
// Message entity representing a codeblock.
//
// See https://core.telegram.org/constructor/messageEntityCode for reference.
type MessageEntityCode struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityCodeTypeID is TL type id of MessageEntityCode.
const MessageEntityCodeTypeID = 0x28a20571

func (m *MessageEntityCode) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityCode) String() string {
	if m == nil {
		return "MessageEntityCode(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityCode")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityCode) TypeID() uint32 {
	return MessageEntityCodeTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityCode) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityCode#28a20571 as nil")
	}
	b.PutID(MessageEntityCodeTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityCode) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityCode) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityCode) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityCode#28a20571 to nil")
	}
	if err := b.ConsumeID(MessageEntityCodeTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityCode#28a20571: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCode#28a20571: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCode#28a20571: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityCode) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityCode.
var (
	_ bin.Encoder = &MessageEntityCode{}
	_ bin.Decoder = &MessageEntityCode{}

	_ MessageEntityClass = &MessageEntityCode{}
)

// MessageEntityPre represents TL type `messageEntityPre#73924be0`.
// Message entity representing a preformatted codeblock, allowing the user to specify a programming language for the codeblock.
//
// See https://core.telegram.org/constructor/messageEntityPre for reference.
type MessageEntityPre struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
	// Programming language of the code
	Language string
}

// MessageEntityPreTypeID is TL type id of MessageEntityPre.
const MessageEntityPreTypeID = 0x73924be0

func (m *MessageEntityPre) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}
	if !(m.Language == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityPre) String() string {
	if m == nil {
		return "MessageEntityPre(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityPre")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("\tLanguage: ")
	sb.WriteString(fmt.Sprint(m.Language))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityPre) TypeID() uint32 {
	return MessageEntityPreTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityPre) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityPre#73924be0 as nil")
	}
	b.PutID(MessageEntityPreTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	b.PutString(m.Language)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityPre) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityPre) GetLength() (value int) {
	return m.Length
}

// GetLanguage returns value of Language field.
func (m *MessageEntityPre) GetLanguage() (value string) {
	return m.Language
}

// Decode implements bin.Decoder.
func (m *MessageEntityPre) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityPre#73924be0 to nil")
	}
	if err := b.ConsumeID(MessageEntityPreTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityPre#73924be0: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPre#73924be0: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPre#73924be0: field length: %w", err)
		}
		m.Length = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPre#73924be0: field language: %w", err)
		}
		m.Language = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityPre) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityPre.
var (
	_ bin.Encoder = &MessageEntityPre{}
	_ bin.Decoder = &MessageEntityPre{}

	_ MessageEntityClass = &MessageEntityPre{}
)

// MessageEntityTextUrl represents TL type `messageEntityTextUrl#76a6d327`.
// Message entity representing a text urlÂ¹: for in-text urls like https://google.comÂ² use messageEntityUrlÂ³.
//
// Links:
//  1) https://google.com
//  2) https://google.com
//  3) https://core.telegram.org/constructor/messageEntityUrl
//
// See https://core.telegram.org/constructor/messageEntityTextUrl for reference.
type MessageEntityTextUrl struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
	// The actual URL
	URL string
}

// MessageEntityTextUrlTypeID is TL type id of MessageEntityTextUrl.
const MessageEntityTextUrlTypeID = 0x76a6d327

func (m *MessageEntityTextUrl) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}
	if !(m.URL == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityTextUrl) String() string {
	if m == nil {
		return "MessageEntityTextUrl(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityTextUrl")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("\tURL: ")
	sb.WriteString(fmt.Sprint(m.URL))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityTextUrl) TypeID() uint32 {
	return MessageEntityTextUrlTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityTextUrl) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityTextUrl#76a6d327 as nil")
	}
	b.PutID(MessageEntityTextUrlTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	b.PutString(m.URL)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityTextUrl) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityTextUrl) GetLength() (value int) {
	return m.Length
}

// GetURL returns value of URL field.
func (m *MessageEntityTextUrl) GetURL() (value string) {
	return m.URL
}

// Decode implements bin.Decoder.
func (m *MessageEntityTextUrl) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityTextUrl#76a6d327 to nil")
	}
	if err := b.ConsumeID(MessageEntityTextUrlTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: field length: %w", err)
		}
		m.Length = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityTextUrl#76a6d327: field url: %w", err)
		}
		m.URL = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityTextUrl) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityTextUrl.
var (
	_ bin.Encoder = &MessageEntityTextUrl{}
	_ bin.Decoder = &MessageEntityTextUrl{}

	_ MessageEntityClass = &MessageEntityTextUrl{}
)

// MessageEntityMentionName represents TL type `messageEntityMentionName#352dca58`.
// Message entity representing a user mentionÂ¹: for creating a mention use inputMessageEntityMentionNameÂ².
//
// Links:
//  1) https://core.telegram.org/api/mentions
//  2) https://core.telegram.org/constructor/inputMessageEntityMentionName
//
// See https://core.telegram.org/constructor/messageEntityMentionName for reference.
type MessageEntityMentionName struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
	// Identifier of the user that was mentioned
	UserID int
}

// MessageEntityMentionNameTypeID is TL type id of MessageEntityMentionName.
const MessageEntityMentionNameTypeID = 0x352dca58

func (m *MessageEntityMentionName) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}
	if !(m.UserID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityMentionName) String() string {
	if m == nil {
		return "MessageEntityMentionName(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityMentionName")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("\tUserID: ")
	sb.WriteString(fmt.Sprint(m.UserID))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityMentionName) TypeID() uint32 {
	return MessageEntityMentionNameTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityMentionName) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityMentionName#352dca58 as nil")
	}
	b.PutID(MessageEntityMentionNameTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	b.PutInt(m.UserID)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityMentionName) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityMentionName) GetLength() (value int) {
	return m.Length
}

// GetUserID returns value of UserID field.
func (m *MessageEntityMentionName) GetUserID() (value int) {
	return m.UserID
}

// Decode implements bin.Decoder.
func (m *MessageEntityMentionName) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityMentionName#352dca58 to nil")
	}
	if err := b.ConsumeID(MessageEntityMentionNameTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityMentionName#352dca58: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMentionName#352dca58: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMentionName#352dca58: field length: %w", err)
		}
		m.Length = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityMentionName#352dca58: field user_id: %w", err)
		}
		m.UserID = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityMentionName) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityMentionName.
var (
	_ bin.Encoder = &MessageEntityMentionName{}
	_ bin.Decoder = &MessageEntityMentionName{}

	_ MessageEntityClass = &MessageEntityMentionName{}
)

// MessageEntityPhone represents TL type `messageEntityPhone#9b69e34b`.
// Message entity representing a phone number.
//
// See https://core.telegram.org/constructor/messageEntityPhone for reference.
type MessageEntityPhone struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityPhoneTypeID is TL type id of MessageEntityPhone.
const MessageEntityPhoneTypeID = 0x9b69e34b

func (m *MessageEntityPhone) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityPhone) String() string {
	if m == nil {
		return "MessageEntityPhone(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityPhone")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityPhone) TypeID() uint32 {
	return MessageEntityPhoneTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityPhone) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityPhone#9b69e34b as nil")
	}
	b.PutID(MessageEntityPhoneTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityPhone) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityPhone) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityPhone) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityPhone#9b69e34b to nil")
	}
	if err := b.ConsumeID(MessageEntityPhoneTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityPhone#9b69e34b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPhone#9b69e34b: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityPhone#9b69e34b: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityPhone) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityPhone.
var (
	_ bin.Encoder = &MessageEntityPhone{}
	_ bin.Decoder = &MessageEntityPhone{}

	_ MessageEntityClass = &MessageEntityPhone{}
)

// MessageEntityCashtag represents TL type `messageEntityCashtag#4c4e743f`.
// Message entity representing a $cashtag.
//
// See https://core.telegram.org/constructor/messageEntityCashtag for reference.
type MessageEntityCashtag struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityCashtagTypeID is TL type id of MessageEntityCashtag.
const MessageEntityCashtagTypeID = 0x4c4e743f

func (m *MessageEntityCashtag) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityCashtag) String() string {
	if m == nil {
		return "MessageEntityCashtag(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityCashtag")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityCashtag) TypeID() uint32 {
	return MessageEntityCashtagTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityCashtag) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityCashtag#4c4e743f as nil")
	}
	b.PutID(MessageEntityCashtagTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityCashtag) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityCashtag) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityCashtag) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityCashtag#4c4e743f to nil")
	}
	if err := b.ConsumeID(MessageEntityCashtagTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityCashtag#4c4e743f: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCashtag#4c4e743f: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityCashtag#4c4e743f: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityCashtag) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityCashtag.
var (
	_ bin.Encoder = &MessageEntityCashtag{}
	_ bin.Decoder = &MessageEntityCashtag{}

	_ MessageEntityClass = &MessageEntityCashtag{}
)

// MessageEntityBankCard represents TL type `messageEntityBankCard#761e6af4`.
// Indicates a credit card number
//
// See https://core.telegram.org/constructor/messageEntityBankCard for reference.
type MessageEntityBankCard struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBankCardTypeID is TL type id of MessageEntityBankCard.
const MessageEntityBankCardTypeID = 0x761e6af4

func (m *MessageEntityBankCard) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBankCard) String() string {
	if m == nil {
		return "MessageEntityBankCard(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityBankCard")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityBankCard) TypeID() uint32 {
	return MessageEntityBankCardTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityBankCard) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBankCard#761e6af4 as nil")
	}
	b.PutID(MessageEntityBankCardTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBankCard) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBankCard) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBankCard) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBankCard#761e6af4 to nil")
	}
	if err := b.ConsumeID(MessageEntityBankCardTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBankCard#761e6af4: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBankCard#761e6af4: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBankCard#761e6af4: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBankCard) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBankCard.
var (
	_ bin.Encoder = &MessageEntityBankCard{}
	_ bin.Decoder = &MessageEntityBankCard{}

	_ MessageEntityClass = &MessageEntityBankCard{}
)

// MessageEntityUnderline represents TL type `messageEntityUnderline#9c4e7e8b`.
// Message entity representing underlined text.
//
// See https://core.telegram.org/constructor/messageEntityUnderline for reference.
type MessageEntityUnderline struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityUnderlineTypeID is TL type id of MessageEntityUnderline.
const MessageEntityUnderlineTypeID = 0x9c4e7e8b

func (m *MessageEntityUnderline) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityUnderline) String() string {
	if m == nil {
		return "MessageEntityUnderline(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityUnderline")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityUnderline) TypeID() uint32 {
	return MessageEntityUnderlineTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityUnderline) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityUnderline#9c4e7e8b as nil")
	}
	b.PutID(MessageEntityUnderlineTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityUnderline) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityUnderline) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityUnderline) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityUnderline#9c4e7e8b to nil")
	}
	if err := b.ConsumeID(MessageEntityUnderlineTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityUnderline#9c4e7e8b: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnderline#9c4e7e8b: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityUnderline#9c4e7e8b: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityUnderline) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityUnderline.
var (
	_ bin.Encoder = &MessageEntityUnderline{}
	_ bin.Decoder = &MessageEntityUnderline{}

	_ MessageEntityClass = &MessageEntityUnderline{}
)

// MessageEntityStrike represents TL type `messageEntityStrike#bf0693d4`.
// Message entity representing strikethrough text.
//
// See https://core.telegram.org/constructor/messageEntityStrike for reference.
type MessageEntityStrike struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityStrikeTypeID is TL type id of MessageEntityStrike.
const MessageEntityStrikeTypeID = 0xbf0693d4

func (m *MessageEntityStrike) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityStrike) String() string {
	if m == nil {
		return "MessageEntityStrike(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityStrike")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityStrike) TypeID() uint32 {
	return MessageEntityStrikeTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityStrike) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityStrike#bf0693d4 as nil")
	}
	b.PutID(MessageEntityStrikeTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityStrike) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityStrike) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityStrike) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityStrike#bf0693d4 to nil")
	}
	if err := b.ConsumeID(MessageEntityStrikeTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityStrike#bf0693d4: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityStrike#bf0693d4: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityStrike#bf0693d4: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityStrike) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityStrike.
var (
	_ bin.Encoder = &MessageEntityStrike{}
	_ bin.Decoder = &MessageEntityStrike{}

	_ MessageEntityClass = &MessageEntityStrike{}
)

// MessageEntityBlockquote represents TL type `messageEntityBlockquote#20df5d0`.
// Message entity representing a block quote.
//
// See https://core.telegram.org/constructor/messageEntityBlockquote for reference.
type MessageEntityBlockquote struct {
	// Offset of message entity within message (in UTF-8 codepoints)
	Offset int
	// Length of message entity within message (in UTF-8 codepoints)
	Length int
}

// MessageEntityBlockquoteTypeID is TL type id of MessageEntityBlockquote.
const MessageEntityBlockquoteTypeID = 0x20df5d0

func (m *MessageEntityBlockquote) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Offset == 0) {
		return false
	}
	if !(m.Length == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageEntityBlockquote) String() string {
	if m == nil {
		return "MessageEntityBlockquote(nil)"
	}
	var sb strings.Builder
	sb.WriteString("MessageEntityBlockquote")
	sb.WriteString("{\n")
	sb.WriteString("\tOffset: ")
	sb.WriteString(fmt.Sprint(m.Offset))
	sb.WriteString(",\n")
	sb.WriteString("\tLength: ")
	sb.WriteString(fmt.Sprint(m.Length))
	sb.WriteString(",\n")
	sb.WriteString("}")
	return sb.String()
}

// TypeID returns MTProto type id (CRC code).
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (m *MessageEntityBlockquote) TypeID() uint32 {
	return MessageEntityBlockquoteTypeID
}

// Encode implements bin.Encoder.
func (m *MessageEntityBlockquote) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageEntityBlockquote#20df5d0 as nil")
	}
	b.PutID(MessageEntityBlockquoteTypeID)
	b.PutInt(m.Offset)
	b.PutInt(m.Length)
	return nil
}

// GetOffset returns value of Offset field.
func (m *MessageEntityBlockquote) GetOffset() (value int) {
	return m.Offset
}

// GetLength returns value of Length field.
func (m *MessageEntityBlockquote) GetLength() (value int) {
	return m.Length
}

// Decode implements bin.Decoder.
func (m *MessageEntityBlockquote) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageEntityBlockquote#20df5d0 to nil")
	}
	if err := b.ConsumeID(MessageEntityBlockquoteTypeID); err != nil {
		return fmt.Errorf("unable to decode messageEntityBlockquote#20df5d0: %w", err)
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBlockquote#20df5d0: field offset: %w", err)
		}
		m.Offset = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messageEntityBlockquote#20df5d0: field length: %w", err)
		}
		m.Length = value
	}
	return nil
}

// construct implements constructor of MessageEntityClass.
func (m MessageEntityBlockquote) construct() MessageEntityClass { return &m }

// Ensuring interfaces in compile-time for MessageEntityBlockquote.
var (
	_ bin.Encoder = &MessageEntityBlockquote{}
	_ bin.Decoder = &MessageEntityBlockquote{}

	_ MessageEntityClass = &MessageEntityBlockquote{}
)

// MessageEntityClass represents MessageEntity generic type.
//
// See https://core.telegram.org/type/MessageEntity for reference.
//
// Example:
//  g, err := DecodeMessageEntity(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *MessageEntityUnknown: // messageEntityUnknown#bb92ba95
//  case *MessageEntityMention: // messageEntityMention#fa04579d
//  case *MessageEntityHashtag: // messageEntityHashtag#6f635b0d
//  case *MessageEntityBotCommand: // messageEntityBotCommand#6cef8ac7
//  case *MessageEntityUrl: // messageEntityUrl#6ed02538
//  case *MessageEntityEmail: // messageEntityEmail#64e475c2
//  case *MessageEntityBold: // messageEntityBold#bd610bc9
//  case *MessageEntityItalic: // messageEntityItalic#826f8b60
//  case *MessageEntityCode: // messageEntityCode#28a20571
//  case *MessageEntityPre: // messageEntityPre#73924be0
//  case *MessageEntityTextUrl: // messageEntityTextUrl#76a6d327
//  case *MessageEntityMentionName: // messageEntityMentionName#352dca58
//  case *MessageEntityPhone: // messageEntityPhone#9b69e34b
//  case *MessageEntityCashtag: // messageEntityCashtag#4c4e743f
//  case *MessageEntityBankCard: // messageEntityBankCard#761e6af4
//  case *MessageEntityUnderline: // messageEntityUnderline#9c4e7e8b
//  case *MessageEntityStrike: // messageEntityStrike#bf0693d4
//  case *MessageEntityBlockquote: // messageEntityBlockquote#20df5d0
//  default: panic(v)
//  }
type MessageEntityClass interface {
	bin.Encoder
	bin.Decoder
	construct() MessageEntityClass

	// Offset of message entity within message (in UTF-8 codepoints)
	GetOffset() (value int)
	// Length of message entity within message (in UTF-8 codepoints)
	GetLength() (value int)

	// TypeID returns MTProto type id (CRC code).
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool
}

// DecodeMessageEntity implements binary de-serialization for MessageEntityClass.
func DecodeMessageEntity(buf *bin.Buffer) (MessageEntityClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessageEntityUnknownTypeID:
		// Decoding messageEntityUnknown#bb92ba95.
		v := MessageEntityUnknown{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityMentionTypeID:
		// Decoding messageEntityMention#fa04579d.
		v := MessageEntityMention{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityHashtagTypeID:
		// Decoding messageEntityHashtag#6f635b0d.
		v := MessageEntityHashtag{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBotCommandTypeID:
		// Decoding messageEntityBotCommand#6cef8ac7.
		v := MessageEntityBotCommand{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityUrlTypeID:
		// Decoding messageEntityUrl#6ed02538.
		v := MessageEntityUrl{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityEmailTypeID:
		// Decoding messageEntityEmail#64e475c2.
		v := MessageEntityEmail{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBoldTypeID:
		// Decoding messageEntityBold#bd610bc9.
		v := MessageEntityBold{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityItalicTypeID:
		// Decoding messageEntityItalic#826f8b60.
		v := MessageEntityItalic{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityCodeTypeID:
		// Decoding messageEntityCode#28a20571.
		v := MessageEntityCode{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityPreTypeID:
		// Decoding messageEntityPre#73924be0.
		v := MessageEntityPre{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityTextUrlTypeID:
		// Decoding messageEntityTextUrl#76a6d327.
		v := MessageEntityTextUrl{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityMentionNameTypeID:
		// Decoding messageEntityMentionName#352dca58.
		v := MessageEntityMentionName{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityPhoneTypeID:
		// Decoding messageEntityPhone#9b69e34b.
		v := MessageEntityPhone{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityCashtagTypeID:
		// Decoding messageEntityCashtag#4c4e743f.
		v := MessageEntityCashtag{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBankCardTypeID:
		// Decoding messageEntityBankCard#761e6af4.
		v := MessageEntityBankCard{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityUnderlineTypeID:
		// Decoding messageEntityUnderline#9c4e7e8b.
		v := MessageEntityUnderline{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityStrikeTypeID:
		// Decoding messageEntityStrike#bf0693d4.
		v := MessageEntityStrike{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	case MessageEntityBlockquoteTypeID:
		// Decoding messageEntityBlockquote#20df5d0.
		v := MessageEntityBlockquote{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageEntityClass: %w", bin.NewUnexpectedID(id))
	}
}

// MessageEntity boxes the MessageEntityClass providing a helper.
type MessageEntityBox struct {
	MessageEntity MessageEntityClass
}

// Decode implements bin.Decoder for MessageEntityBox.
func (b *MessageEntityBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageEntityBox to nil")
	}
	v, err := DecodeMessageEntity(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageEntity = v
	return nil
}

// Encode implements bin.Encode for MessageEntityBox.
func (b *MessageEntityBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.MessageEntity == nil {
		return fmt.Errorf("unable to encode MessageEntityClass as nil")
	}
	return b.MessageEntity.Encode(buf)
}
